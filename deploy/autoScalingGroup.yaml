heat_template_version: wallaby
description: Example auto scale group, policy and alarm
resources:
  instance_group:
    type: OS::Heat::AutoScalingGroup
    properties:
      cooldown: 10
      desired_capacity: 1
      min_size: 1
      max_size: 3
      resource:
        type: OS::Nova::Server::Cirros
        properties:
          metadata: {"metering.server_group": {get_param: "OS::stack_id"}}

  scaleout_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: instance_group }
      cooldown: 10
      scaling_adjustment: 1

  scalein_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: { get_resource: instance_group }
      cooldown: 10
      scaling_adjustment: -1

  cpu_alarm_high:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale up if CPU > 80%
      metric: cpu
      aggregation_method: rate:mean
      granularity: 60
      evaluation_periods: 2
      threshold: 800000000.0 # Uso de CPU del 80% 
      resource_type: instance
      comparison_operator: gt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [scaleout_policy, signal_url]}
      query:
        str_replace:
          template: '{"=": {"server_group": "stack_id"}}'
          params:
            stack_id: {get_param: "OS::stack_id"}

  cpu_alarm_low:
    type: OS::Aodh::GnocchiAggregationByResourcesAlarm
    properties:
      description: Scale down if CPU < 20%
      metric: cpu
      aggregation_method: rate:mean
      granularity: 60
      evaluation_periods: 2
      threshold: 200000000.0 # Uso de CPU del 20% 
      resource_type: instance
      comparison_operator: lt
      alarm_actions:
        - str_replace:
            template: trust+url
            params:
              url: {get_attr: [scalein_policy, signal_url]}
      query:
        str_replace:
          template: '{"=": {"server_group": "stack_id"}}'
          params:
            stack_id: {get_param: "OS::stack_id"}

outputs:
  scaleout_policy_signal_url:
    value: {get_attr: [scaleout_policy, signal_url]}
    

  scalein_policy_signal_url:
    value: {get_attr: [scalein_policy, signal_url]}

